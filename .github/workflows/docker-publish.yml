name: Build and Push Docker Image to ECR

on:
  push:
    branches:
      - main  # Trigger the action on push to main branch (adjust as needed)
  pull_request:
    branches:
      - main  # Optional: Trigger action on PR to main branch

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up AWS credentials (hardcode the region here)
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'us-east-1'  # Hardcoded region (replace with your region)

    # Log in to Amazon ECR
    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    # Build Docker image
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY_URI }} .

    # Push Docker image to ECR
    - name: Push Docker image to ECR
      run: |
        docker tag ${{ secrets.ECR_REPOSITORY_URI }}:latest ${{ secrets.ECR_REPOSITORY_URI }}:${{ github.sha }}
        docker push ${{ secrets.ECR_REPOSITORY_URI }}:${{ github.sha }}

     # Register new ECS task definition with the new image
    - name: Register new ECS task definition
      id: register_task_definition
      run: |
        # Register the ECS task definition
        TASK_DEFINITION_ARN=$(aws ecs register-task-definition \
          --family my-task-def \
          --container-definitions "[{
            \"name\": \"my-container\",
            \"image\": \"${{ secrets.ECR_REPOSITORY_URI }}:${{ github.sha }}\",
            \"cpu\": 256,
            \"memory\": 512,
            \"essential\": true,
            \"portMappings\": [{
              \"containerPort\": 3000,
              \"hostPort\": 3000
            }]
          }]" \
          --network-mode awsvpc \
          --requires-compatibilities FARGATE \
          --cpu 256 \
          --memory 512 \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)

        echo "Registered ECS Task Definition: $TASK_DEFINITION_ARN"
        
        # Pass the Task Definition ARN to the next step
        echo "TASK_DEFINITION_ARN=$TASK_DEFINITION_ARN" >> $GITHUB_ENV

    # Update ECS service with the new task definition
    - name: Update ECS service with new task definition
      run: |
        ecs_service_name="my-ecs-service"
        ecs_cluster_name="my-ecs-cluster"
        
        # Update the ECS service to use the new task definition (with FARGATE launch type)
        aws ecs update-service \
          --cluster $ecs_cluster_name \
          --service $ecs_service_name \
          --task-definition ${{ env.TASK_DEFINITION_ARN }} \
          --desired-count 1 \
          --launch-type FARGATE  # Specify Fargate launch type heree

        echo "ECS service updated with new task definition"
